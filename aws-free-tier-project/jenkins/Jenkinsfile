pipeline {
    agent any

    parameters {
        choice(
            name: 'TARGET_ENV',
            choices: ['dev', 'prod'],
            description: 'Choose which environment to deploy'
        )
    }

    environment {
        ENVIRONMENT = "${params.TARGET_ENV}"
    }

    stages {
        stage('Terraform Free-Tier Deploy') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
                ]) {
                    script {
                        def envName = ENVIRONMENT
                        def tfDir = "aws-free-tier-project/terraform/${envName}"
                        def tfVars = "${envName}.tfvars"

                        stage("üîÅ Apply Terraform - ${envName}") {
                            dir(tfDir) {
                                echo "üîß Initializing Terraform for ${envName}"

                                bat 'terraform init'
                                bat 'terraform validate'
                                bat "terraform plan -var-file=${tfVars}"
                                bat "terraform apply -auto-approve -var-file=${tfVars}"
                            }

                            if (envName == "prod") {
                                echo "üîê PROD - Notify admin"
                            } else {
                                echo "üß™ DEV - Enable auto-tests"
                            }

                            def retries = 0
                            def healthy = false
                            while (!healthy && retries < 3) {
                                echo "Checking service status... attempt ${retries + 1}"
                                healthy = true
                                sleep 2
                                retries++
                            }

                            if (!healthy) {
                                error "‚ùå Service not healthy in ${envName}"
                            }
                        }
                    }
                }
            }
        }
    }
}
